// Code generated by MockGen. DO NOT EDIT.
// Source: internal/build/check_executor.go
//
// Generated by this command:
//
//	mockgen -source=internal/build/check_executor.go -destination=mocks/check_executor.go --package=mocks --exclude_interfaces=step
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	build "go.stplr.dev/stplr/internal/build"
	staplerfile "go.stplr.dev/stplr/pkg/staplerfile"
	gomock "go.uber.org/mock/gomock"
)

// MockchecksRunnerConfig is a mock of checksRunnerConfig interface.
type MockchecksRunnerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockchecksRunnerConfigMockRecorder
	isgomock struct{}
}

// MockchecksRunnerConfigMockRecorder is the mock recorder for MockchecksRunnerConfig.
type MockchecksRunnerConfigMockRecorder struct {
	mock *MockchecksRunnerConfig
}

// NewMockchecksRunnerConfig creates a new mock instance.
func NewMockchecksRunnerConfig(ctrl *gomock.Controller) *MockchecksRunnerConfig {
	mock := &MockchecksRunnerConfig{ctrl: ctrl}
	mock.recorder = &MockchecksRunnerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchecksRunnerConfig) EXPECT() *MockchecksRunnerConfigMockRecorder {
	return m.recorder
}

// ForbidSkipInChecksums mocks base method.
func (m *MockchecksRunnerConfig) ForbidSkipInChecksums() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForbidSkipInChecksums")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ForbidSkipInChecksums indicates an expected call of ForbidSkipInChecksums.
func (mr *MockchecksRunnerConfigMockRecorder) ForbidSkipInChecksums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbidSkipInChecksums", reflect.TypeOf((*MockchecksRunnerConfig)(nil).ForbidSkipInChecksums))
}

// MockChecksExecutor is a mock of ChecksExecutor interface.
type MockChecksExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockChecksExecutorMockRecorder
	isgomock struct{}
}

// MockChecksExecutorMockRecorder is the mock recorder for MockChecksExecutor.
type MockChecksExecutorMockRecorder struct {
	mock *MockChecksExecutor
}

// NewMockChecksExecutor creates a new mock instance.
func NewMockChecksExecutor(ctrl *gomock.Controller) *MockChecksExecutor {
	mock := &MockChecksExecutor{ctrl: ctrl}
	mock.recorder = &MockChecksExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecksExecutor) EXPECT() *MockChecksExecutorMockRecorder {
	return m.recorder
}

// RunChecks mocks base method.
func (m *MockChecksExecutor) RunChecks(ctx context.Context, pkg *staplerfile.Package, input *build.BuildInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunChecks", ctx, pkg, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunChecks indicates an expected call of RunChecks.
func (mr *MockChecksExecutorMockRecorder) RunChecks(ctx, pkg, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunChecks", reflect.TypeOf((*MockChecksExecutor)(nil).RunChecks), ctx, pkg, input)
}
