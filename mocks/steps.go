// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/builder/steps.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/builder/steps.go -destination=mocks/steps.go --package=mocks --exclude_interfaces=step
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	staplerfile "go.stplr.dev/stplr/pkg/staplerfile"
	gomock "go.uber.org/mock/gomock"
)

// MockPackageFinder is a mock of PackageFinder interface.
type MockPackageFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPackageFinderMockRecorder
	isgomock struct{}
}

// MockPackageFinderMockRecorder is the mock recorder for MockPackageFinder.
type MockPackageFinderMockRecorder struct {
	mock *MockPackageFinder
}

// NewMockPackageFinder creates a new mock instance.
func NewMockPackageFinder(ctrl *gomock.Controller) *MockPackageFinder {
	mock := &MockPackageFinder{ctrl: ctrl}
	mock.recorder = &MockPackageFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageFinder) EXPECT() *MockPackageFinderMockRecorder {
	return m.recorder
}

// FindPkgs mocks base method.
func (m *MockPackageFinder) FindPkgs(ctx context.Context, names []string) (map[string][]staplerfile.Package, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPkgs", ctx, names)
	ret0, _ := ret[0].(map[string][]staplerfile.Package)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPkgs indicates an expected call of FindPkgs.
func (mr *MockPackageFinderMockRecorder) FindPkgs(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPkgs", reflect.TypeOf((*MockPackageFinder)(nil).FindPkgs), ctx, names)
}
