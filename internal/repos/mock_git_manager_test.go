// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repos/git_manager.go
//
// Generated by this command:
//
//	mockgen -source=internal/repos/git_manager.go -destination=internal/repos/mock_git_manager_test.go -package=repos
//

// Package repos is a generated GoMock package.
package repos

import (
	context "context"
	reflect "reflect"

	git "github.com/go-git/go-git/v5"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	object "github.com/go-git/go-git/v5/plumbing/object"
	gomock "go.uber.org/mock/gomock"
)

// MockgitRepository is a mock of gitRepository interface.
type MockgitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockgitRepositoryMockRecorder
	isgomock struct{}
}

// MockgitRepositoryMockRecorder is the mock recorder for MockgitRepository.
type MockgitRepositoryMockRecorder struct {
	mock *MockgitRepository
}

// NewMockgitRepository creates a new mock instance.
func NewMockgitRepository(ctrl *gomock.Controller) *MockgitRepository {
	mock := &MockgitRepository{ctrl: ctrl}
	mock.recorder = &MockgitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgitRepository) EXPECT() *MockgitRepositoryMockRecorder {
	return m.recorder
}

// CommitObject mocks base method.
func (m *MockgitRepository) CommitObject(h plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", h)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject.
func (mr *MockgitRepositoryMockRecorder) CommitObject(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockgitRepository)(nil).CommitObject), h)
}

// DeleteTag mocks base method.
func (m *MockgitRepository) DeleteTag(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockgitRepositoryMockRecorder) DeleteTag(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockgitRepository)(nil).DeleteTag), arg0)
}

// FetchContext mocks base method.
func (m *MockgitRepository) FetchContext(arg0 context.Context, arg1 *git.FetchOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchContext indicates an expected call of FetchContext.
func (mr *MockgitRepositoryMockRecorder) FetchContext(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchContext", reflect.TypeOf((*MockgitRepository)(nil).FetchContext), arg0, arg1)
}

// Worktree mocks base method.
func (m *MockgitRepository) Worktree() (*git.Worktree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worktree")
	ret0, _ := ret[0].(*git.Worktree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worktree indicates an expected call of Worktree.
func (mr *MockgitRepositoryMockRecorder) Worktree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worktree", reflect.TypeOf((*MockgitRepository)(nil).Worktree))
}
