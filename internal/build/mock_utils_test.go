// Code generated by MockGen. DO NOT EDIT.
// Source: internal/build/utils.go
//
// Generated by this command:
//
//	mockgen -source=internal/build/utils.go -destination=internal/build/mock_utils_test.go -package=build
//

// Package build is a generated GoMock package.
package build

import (
	reflect "reflect"

	distro "go.stplr.dev/stplr/pkg/distro"
	types "go.stplr.dev/stplr/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockgetBasePkgInfoInput is a mock of getBasePkgInfoInput interface.
type MockgetBasePkgInfoInput struct {
	ctrl     *gomock.Controller
	recorder *MockgetBasePkgInfoInputMockRecorder
	isgomock struct{}
}

// MockgetBasePkgInfoInputMockRecorder is the mock recorder for MockgetBasePkgInfoInput.
type MockgetBasePkgInfoInputMockRecorder struct {
	mock *MockgetBasePkgInfoInput
}

// NewMockgetBasePkgInfoInput creates a new mock instance.
func NewMockgetBasePkgInfoInput(ctrl *gomock.Controller) *MockgetBasePkgInfoInput {
	mock := &MockgetBasePkgInfoInput{ctrl: ctrl}
	mock.recorder = &MockgetBasePkgInfoInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetBasePkgInfoInput) EXPECT() *MockgetBasePkgInfoInputMockRecorder {
	return m.recorder
}

// BuildOpts mocks base method.
func (m *MockgetBasePkgInfoInput) BuildOpts() *types.BuildOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOpts")
	ret0, _ := ret[0].(*types.BuildOpts)
	return ret0
}

// BuildOpts indicates an expected call of BuildOpts.
func (mr *MockgetBasePkgInfoInputMockRecorder) BuildOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOpts", reflect.TypeOf((*MockgetBasePkgInfoInput)(nil).BuildOpts))
}

// OSRelease mocks base method.
func (m *MockgetBasePkgInfoInput) OSRelease() *distro.OSRelease {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSRelease")
	ret0, _ := ret[0].(*distro.OSRelease)
	return ret0
}

// OSRelease indicates an expected call of OSRelease.
func (mr *MockgetBasePkgInfoInputMockRecorder) OSRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSRelease", reflect.TypeOf((*MockgetBasePkgInfoInput)(nil).OSRelease))
}

// Repository mocks base method.
func (m *MockgetBasePkgInfoInput) Repository() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(string)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockgetBasePkgInfoInputMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockgetBasePkgInfoInput)(nil).Repository))
}
